xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
  DOCKER SWARM y DOCKER STACK
  
  1.-
  
  docker swarm init
  (levanta el swarm/enjambre y marca como master la maquina actual )
  docker swarm join ....
  
  2.- docker-compose.yml
  
  3.- docker stack deploy ....
  
  4.- docker swarm ps ....
  
  .....
  
  
  
  
  
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
 Ejercicio BBDD - Comunicacion de containers 
 
 1.- Preparamos un dockerfile para:
 
  - Crear una imagen de nombre xxxxxxxx  a partir de matt68/mysql80
  - Instalar paquetes: 
     yum  install iputils  \
                  ping

 2.- Levantamos la imagen / ejecutamos un container y nos conectamos con un bash en él.

docker network create  palmanet
docker volume  create   data_mysql80

docker run -dP --network palmanet --name mysql80 -e MYSQL_ROOT_PASSWORD=forma2 \
             --mount source=data_mysql80,destination=/usr/local/hadoop_data      \
             -h mysqlserver -p 3306:3306 -it xxxxxxxxx
 
 3.-  Abrimos sesión de mysql y lanzamos:
 
 mysql -u root -p 
 
 create database test;
 use test;
 create table t1(c1 char(10), c2 int);
 insert into t1 values("Palma",4),("Inca",6);
 select * from t1;

 4.- Para que admita conexiones remotas:
 
 mysql> select user, host from mysql.user;
+------------------+-----------+
| user             | host      |
+------------------+-----------+
| healthchecker    | localhost |
| mysql.infoschema | localhost |
| mysql.session    | localhost |
| mysql.sys        | localhost |
| root             | localhost |
+------------------+-----------+

mysql> update mysql.user set host="%" where user="root";

mysql> select user, host from mysql.user;
+------------------+-----------+
| user             | host      |
+------------------+-----------+
| root             | %         |
| healthchecker    | localhost |
| mysql.infoschema | localhost |
| mysql.session    | localhost |
| mysql.sys        | localhost |
+------------------+-----------+
mysql> quit
 mysql -u root -p
 
mysql> GRANT ALL PRIVILEGES ON *.* TO 'root'@'%';
-- Si da problemas con ssha caching:
CREATE USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY 'forma2';

PROBAMOS A CONECTAR DESDE EL HOST... OK
Y Para conectar desde otro container con un cliente de mysql creamos un container_cliente usando 
la misma imagen de mysql:

docker run -dP --network palmanet --name mysql80_client -e MYSQL_ROOT_PASSWORD=forma2 \
           -h mysqlclient -p 3333:3306 -it matt68/mysql80

Por último entramos al container y nos conectamos al mysql_server:
map@MAPMNTLX:~$ docker exec -it mysql80_client bash
bash-4.2# mysql -u root -p -h 172.18.0.2

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
Para descarga una imagen con mysql 8.0 y levantar un container:

docker push matt68/mysql80

docker run -dP --network palmanet --name mysql80 -e MYSQL_ROOT_PASSWORD=forma2 \
             --mount source=data_mysql80,destination=/usr/local/hadoop_data      \
             -h mysqlserver -p 3306:3306 -it matt68/mysql80

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

Para levantar un container contra mysql80

 
             
docker exec ...

create database test;
use test;
create table t1(c1 char(10), c2 int);
insert into t1 values("Palma",4),("Inca",6);
select * from t1;

-- En el servidor mysql no nos deja conectar si no ponemos:
   GRANT ALL PRIVILEGES ON *.* TO 'root'@'%';
   
